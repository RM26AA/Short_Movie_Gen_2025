import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { 
  Download, 
  Film, 
  Users, 
  Target, 
  Map, 
  Music, 
  Star,
  BookOpen,
  Zap,
  MapPin,
  Camera,
  Award
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface MovieData {
  movieName: string;
  genre: string;
  tagline: string;
  plotSummary: string;
  keyCharacters: string;
  keyThemes: string;
  storyStructure: string;
  coreConflict: string;
  setting: string;
  finalScene: string;
  endCredits: string;
  musicTheme: string;
}

interface MovieResultProps {
  movieData: MovieData;
}

export const MovieResult = ({ movieData }: MovieResultProps) => {
  const { toast } = useToast();

  const saveToFile = () => {
    const content = `
üé¨ ${movieData.movieName}
üìö Genre: ${movieData.genre}
‚ú® Tagline: ${movieData.tagline}

üìñ PLOT SUMMARY
${movieData.plotSummary}

üë• KEY CHARACTERS
${movieData.keyCharacters}

üé≠ KEY THEMES
${movieData.keyThemes}

üìä STORY STRUCTURE
${movieData.storyStructure}

‚öîÔ∏è CORE CONFLICT
${movieData.coreConflict}

üåç SETTING
${movieData.setting}

üé¨ FINAL SCENE
${movieData.finalScene}

üèÜ END CREDITS
${movieData.endCredits}

üéµ MUSIC THEME
${movieData.musicTheme}

Generated by Movie Idea Generator
    `;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${movieData.movieName.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_concept.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Movie concept saved!",
      description: "Your movie concept has been downloaded as a text file.",
    });
  };

  const movieElements = [
    { icon: Film, title: "Movie Name", content: movieData.movieName, accent: true },
    { icon: Star, title: "Genre", content: movieData.genre },
    { icon: Zap, title: "Tagline", content: movieData.tagline, italic: true },
    { icon: BookOpen, title: "Plot Summary", content: movieData.plotSummary },
    { icon: Users, title: "Key Characters", content: movieData.keyCharacters },
    { icon: Target, title: "Key Themes", content: movieData.keyThemes },
    { icon: Map, title: "Story Structure", content: movieData.storyStructure },
    { icon: Zap, title: "Core Conflict", content: movieData.coreConflict },
    { icon: MapPin, title: "Setting", content: movieData.setting },
    { icon: Camera, title: "Final Scene", content: movieData.finalScene },
    { icon: Award, title: "End Credits", content: movieData.endCredits },
    { icon: Music, title: "Music Theme", content: movieData.musicTheme },
  ];

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Header Card */}
      <Card className="bg-cinema-gradient-dark text-white shadow-film-glow">
        <CardHeader className="text-center">
          <CardTitle className="text-3xl md:text-4xl font-bold mb-2">
            {movieData.movieName}
          </CardTitle>
          <p className="text-xl text-white/90 italic">"{movieData.tagline}"</p>
          <p className="text-lg text-white/80 mt-2">Genre: {movieData.genre}</p>
        </CardHeader>
      </Card>

      {/* Save Button */}
      <div className="flex justify-center">
        <Button
          onClick={saveToFile}
          variant="cinema"
          size="lg"
          className="shadow-film"
        >
          <Download className="mr-2 h-4 w-4" />
          Save Movie Concept
        </Button>
      </div>

      {/* Movie Details Grid */}
      <div className="grid gap-6 md:grid-cols-2">
        {movieElements.slice(3).map((element, index) => {
          const IconComponent = element.icon;
          return (
            <Card 
              key={element.title} 
              className="shadow-film hover:shadow-film-glow transition-all duration-300 hover:scale-[1.02] bg-white/95 backdrop-blur-sm"
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              <CardHeader className="pb-3">
                <CardTitle className="flex items-center gap-2 text-cinema-blue">
                  <IconComponent className="h-5 w-5" />
                  {element.title}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className={`text-foreground leading-relaxed ${element.italic ? 'italic' : ''}`}>
                  {element.content}
                </p>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );
};